// This file is automatically generated. Do not edit it directly.
import { createClient } from "@supabase/supabase-js";
import type { Database } from "./types";

/**
 * Supabase Auth (by default) uses a fixed key in localStorage which makes the
 * session global to all tabs for the same origin. The product requirement now
 * is to allow logging into DIFFERENT accounts concurrently in separate tabs.
 *
 * Approach:
 *  - Use a per-tab storage key derived from a tab-specific ID kept in
 *    sessionStorage (which is scoped to the lifetime of the tab).
 *  - Store the session itself in sessionStorage instead of localStorage so it
 *    is NOT shared across tabs. (Reloads in the same tab retain the session.)
 *  - Each tab therefore initializes its own Supabase client + auth state.
 *
 * Consequences / Notes:
 *  - Closing a tab forgets that tab's session (intended for isolation).
 *  - A sign-out in one tab will NOT sign out other tabs (also intended).
 *  - If you ever want the old shared-session behavior, revert storage to
 *    localStorage and remove the dynamic storageKey logic.
 */

const SUPABASE_URL = "https://mgozxfzqafduesaovyjo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nb3p4ZnpxYWZkdWVzYW92eWpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3ODI1NTYsImV4cCI6MjA3NDM1ODU1Nn0.USmAJJCKzjzAC4AgwfKg2DYdxzeqJXEx0mibRi4EebQ"; // public anon key (safe client-side)

// Generate or retrieve a stable per-tab id (persists across reloads, not across new tab instances)
function getTabId(): string {
  if (typeof window === "undefined") return "server";
  try {
    const existing = window.sessionStorage.getItem("QB_TAB_ID");
    if (existing) return existing;
    const id =
      window.crypto?.randomUUID?.() || Math.random().toString(36).slice(2);
    window.sessionStorage.setItem("QB_TAB_ID", id);
    return id;
  } catch {
    // Fallback if sessionStorage not available (shouldn't happen in normal browser usage)
    return "fallback";
  }
}

const TAB_ID = getTabId();
const STORAGE_KEY = `sb-${TAB_ID}-auth`; // unique per tab

// Provide a storage adapter (Supabase expects the Storage interface of Web Storage)
const storage =
  typeof window !== "undefined" ? window.sessionStorage : undefined;

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage,
      storageKey: STORAGE_KEY,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
  }
);
